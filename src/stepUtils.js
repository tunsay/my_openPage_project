// Utilitaires pour cr√©er facilement de nouvelles √©tapes

/**
 * Cr√©e une √©tape de bienvenue simple
 * @param {number} id - Num√©ro de l'√©tape
 * @param {string} text - Texte √† afficher
 */
export const createWelcomeStep = (id, text) => ({
    id,
    type: "welcome",
    content: { text }
});

/**
 * Cr√©e une √©tape avec seulement du texte (pas de bouton suivant)
 * @param {number} id - Num√©ro de l'√©tape
 * @param {string} text - Texte √† afficher
 */
export const createSimpleTextStep = (id, text) => ({
    id,
    type: "simple-text",
    content: { text }
});

/**
 * Cr√©e une √©tape vid√©o
 * @param {number} id - Num√©ro de l'√©tape
 * @param {string} text - Texte descriptif
 * @param {string} videoSrc - Chemin vers la vid√©o (ex: "/video.mp4")
 * @param {boolean} autoplay - Lecture automatique (d√©faut: false)
 * @param {boolean} controls - Afficher les contr√¥les (d√©faut: true)
 * @param {boolean} autoFullscreen - Passer automatiquement en plein √©cran (d√©faut: false)
 * @param {string} endMessage - Message √† afficher √† la fin (d√©faut: "J'esp√®re que √ßa t'a plu !")
 * @param {boolean} showSkip - Afficher un bouton "Passer" (d√©faut: false)
 */
export const createVideoStep = (id, text, videoSrc, autoplay = false, controls = true, autoFullscreen = false, endMessage = "J'esp√®re que √ßa t'a plu !", showSkip = false) => ({
    id,
    type: "video",
    content: {
        text,
        videoSrc,
        autoplay,
        controls,
        autoFullscreen,
        endMessage,
        showSkip
    }
});

/**
 * Cr√©e une √©tape avec question et validation num√©rique
 * @param {number} id - Num√©ro de l'√©tape
 * @param {string} text - Texte de pr√©sentation
 * @param {string} question - Libell√© de la question
 * @param {string} placeholder - Placeholder pour l'input
 * @param {number} min - Valeur minimum
 * @param {number} max - Valeur maximum
 * @param {object} errorMessages - Messages d'erreur personnalis√©s
 */
export const createNumberQuestionStep = (id, text, question, placeholder, min, max, errorMessages = {}) => ({
    id,
    type: "question",
    content: {
        text,
        question,
        placeholder,
        inputType: "number",
        validation: {
            required: true,
            min,
            max,
            errorMessages: {
                required: "Veuillez entrer une valeur.",
                invalid: "Veuillez entrer un nombre valide.",
                min: `La valeur doit √™tre au moins ${min}.`,
                max: `La valeur ne peut pas d√©passer ${max}.`,
                ...errorMessages
            }
        }
    }
});

/**
 * Cr√©e une √©tape avec question et validation de texte/code
 * @param {number} id - Num√©ro de l'√©tape
 * @param {string} text - Texte de pr√©sentation
 * @param {string} question - Libell√© de la question
 * @param {string} placeholder - Placeholder pour l'input
 * @param {string} expectedValue - Valeur attendue
 * @param {string} successMessage - Message de succ√®s
 * @param {object} errorMessages - Messages d'erreur personnalis√©s
 */
export const createTextQuestionStep = (id, text, question, placeholder, expectedValue, successMessage, errorMessages = {}) => ({
    id,
    type: "question",
    content: {
        text,
        question,
        placeholder,
        inputType: "text",
        validation: {
            required: true,
            expectedValue,
            errorMessages: {
                required: "Veuillez entrer une r√©ponse.",
                invalid: "R√©ponse incorrecte. Veuillez r√©essayer.",
                ...errorMessages
            },
            successMessage
        }
    }
});

/**
 * Cr√©e une √©tape vid√©o surprise (plein √©cran automatique, sans contr√¥les)
 * @param {number} id - Num√©ro de l'√©tape
 * @param {string} text - Texte descriptif (affich√© avant le plein √©cran)
 * @param {string} videoSrc - Chemin vers la vid√©o
 * @param {string} endMessage - Message surprise √† la fin
 */
export const createSurpriseVideoStep = (id, text, videoSrc, endMessage = "üéâ Surprise ! J'esp√®re que √ßa t'a plu ! üéâ") => ({
    id,
    type: "video",
    content: {
        text,
        videoSrc,
        autoplay: true,
        controls: false,
        autoFullscreen: true,
        endMessage,
        showSkip: false
    }
});

// ...existing code...
/*
// √âtape de bienvenue
const step1 = createWelcomeStep(1, "Bienvenue dans notre application !");

// √âtape vid√©o
const step2 = createVideoStep(2, "Regardez cette pr√©sentation", "/ma-video.mp4");

// Question d'√¢ge
const step3 = createNumberQuestionStep(
    3,
    "Pour continuer, nous devons v√©rifier votre √¢ge.",
    "Votre √¢ge :",
    "Entrez votre √¢ge",
    18,
    120,
    { min: "Vous devez √™tre majeur pour continuer." }
);

// Question de code
const step4 = createTextQuestionStep(
    4,
    "Entrez le code secret pour acc√©der au contenu.",
    "Code :",
    "Entrez le code",
    "SECRET123",
    "Parfait ! Vous avez le bon code."
);

// Texte final
const step5 = createSimpleTextStep(5, "F√©licitations ! Vous avez termin√©.");
*/
